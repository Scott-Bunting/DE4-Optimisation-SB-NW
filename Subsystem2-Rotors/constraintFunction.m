function [c,ceq] = constraintFunction(x, rhoMaterial, sigmaMaterial, E)

    %% Function input variables
    
    %{
    x = Design Variables
    rhoMaterial = Density of Material
    sigmaMaterial = Yield Stress of Material
    E = Youngs Modulus of Material
    %}

    %% Parameters for non-linear constraint
    
    numberRotors = 4; %No. of rotors
    numberBlades = 2; %No. of blades per rotor
    massDrone = 1.4; %Mass of drone
    g = 9.81; %Acceleration due to gravity
    rhoAir = 1.225; %Density of Air
    theta = 1.3; %Angle of Attack
    omega = 1528; %Maximum angular velocity
    powerFactor = 2; %Power factor
    safetyFactor = 1.5; %Safety factor
    
    %% Thrust Inequality
    %The minimum thrust generated must be greater than 2x (defined by the
    %Power factor) the force due to gravity on the drone.
    
    %Thrust generated by each rotor
    thrust = 2*sin(theta)*omega*rhoAir*g*(x(3)^2 - x(4)^2)*x(1);
    
    %Volume of components of rotor
    volLift = pi*x(1)*x(2)*(x(3)-x(4));
    volNoLift = pi*x(2)*x(5)*x(4);
    
    %Thrust Constraint (Including min. requirement and Mass of rotors)
    c1 = (powerFactor*massDrone*g)/(numberRotors*numberBlades)...
        - (thrust - rhoMaterial*g*(volLift + volNoLift));
    
    %% Root Stress Inequality
    %The stress at the root when fully loaded must be less than the yield
    %strength of the material of the rotor.
    
    %Cross-sectional area of root
    areaNoLift = pi*x(2)*x(5);
    
    %Stress at root (No Lift Area)
    sigmaRoot = (safetyFactor*thrust*x(3)/2)/areaNoLift;
    
    %Stress Constraint
    c2 = sigmaRoot - sigmaMaterial;
    
    %% Deflection Inequality
    %The deflection of a rotor blade must be smaller than 1mm. This is to
    %ensure that the lift equation remains true
    
    %This could be changed to a percentage of the length of the blade.
    
    %Second moment of area
    I = (pi/4)*(x(1)/2)*(x(2)/2)^3;
    
    %Distributed load
    omega = thrust/x(3);
    
    %Deflection Constraint
    c3 = (omega*x(3)^4)/(8*E*I) - 0.001;
    
    %% Concatenating the Constraints
    
    %When unbounded, the order of these constraints directly affects how
    %fmincon attempts to solve the problem
    
    c = [c1;
        c2;
        c3];
    
    %% Non-linear Constraints (Equalities)
    % Currently none. Deflection will probably end up being an equality
    % constraint as the deflection always tends to the limit set by the
    % inequality.
    
    ceq = 0;
    
end
